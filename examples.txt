(let ((x 1) (y 5) (z 8)) (let* ((x 2) (z x)) (* x y z)))

(begin
   (define factorial
      (lambda (n)
         (if (= n 0) 1
            (* n (factorial (- n 1))))))

   (define double (lambda (x) (* 2 x)))

   (define apply (lambda (f x) (f x)))

   (apply double (factorial 5))
)


(begin
	(define x 3)
	(define y 7)
	(set! x (+ x 2))
	(* x y)
)

(begin
	(define l '(b c))
	(cons '(x y z) (cons 'z l))
	(cdr (car l))
)

(if (= 2 3)
    (+ 2 3)
    (if (< 5 6)
    	(#t)
    	(#f)
    )
)